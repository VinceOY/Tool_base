k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
#setnames(dt, group_id_col, "ID")
setnames(dt, date_col, "DATE")
# Drop Duplicate
unique(dt, by = c("ID", "DATE"))
# Drop Duplicate
unique(dt, by = c(group_id_col, "DATE"))
# Standardized date format
dt <- standardized_date(dt, "DATE")
# sort values
dt <- dt[order(as.name(group_id_col), DATE)]
# sort values
dt <- dt[order((group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
# Standardized date format
dt <- standardized_date(dt, "DATE")
# sort values
dt <- dt[order(get(group_id_col), DATE)]
dt
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
dt
dt[order(get(group_id_col), DATE)]
setnames(dt, date_col, "DATE")
dt
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
dt[order(get(group_id_col), DATE)]
# Standardized date format
dt <- standardized_date(dt, "DATE")
# sort values
dt <- dt[order(get(group_id_col), DATE)]
# Drop Duplicate
unique(dt, by = c(group_id_col, "DATE"))
# Standardized date format
dt <- standardized_date(dt, "DATE")
# sort values
dt <- dt[order(get(group_id_col), DATE)]
setorderv(dt, c("ID", "DATE"))
dt
dt
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
#setnames(dt, group_id_col, "ID")
setnames(dt, date_col, "DATE")
# Drop Duplicate
unique(dt, by = c(group_id_col, "DATE"))
# Standardized date format
dt <- standardized_date(dt, "DATE")
dt
dt[order(get(group_id_col), DATE)]
# sort values
dt <- dt[order(get(group_id_col), DATE)]
dt
dt[, k_times_data := shift(DATE, n = -(k-1)), by = ID]
# new col
dt[, k_times_data := shift(DATE, n = -(k-1)), by = get(group_id_col)]
# Rename data col
dt <- dt[, .(ID = get(group_id_col),
DATE = get(date_col))]
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
dt <- dt[, .(ID = get(group_id_col),
DATE = get(date_col))]
unique(dt, by = c(ID, "DATE"))
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
dt <- dt[, .(ID = get(group_id_col),
DATE = get(date_col))]
# Drop Duplicate
dt <- duplicated(dt())
unique(dt, by = c(ID, "DATE"))
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
dt <- dt[, .(ID = get(group_id_col),
DATE = get(date_col))]
unique(dt, by = c(ID, "DATE"))
unique(dt, by = c("ID", "DATE"))
dt
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = c("20160101", "20160202", "20160303", "20160404", "20160505",
"20160404"))
k <- 2
group_id_col <- "ID_TEST"
date_col <- "IPD_DATE"
# Drop Duplicate
dt <- dt[!duplicated(dt)]
dt
# 創建一個測試用的假資料表
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
# 測試 fetch_data() 函數是否能正常運行並返回正確的結果
filtered_data <- fetch_data(dt, target_ID_cols, disease_ID_cols, disease_codes)
filtered_data
fetch_data <- function(dt, target_ID_cols, disease_ID_cols, disease_codes){
# Data type restrictions
assert_that(is.data.table(dt), msg="Error: 'df' must be a data.table")
assert_that(is.vector(target_ID_cols),
msg="Error: 'target_ID_cols' must be a list.")
assert_that(is.character(disease_codes),
msg="Error: 'search_ID' must be a character vector.")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.(target_ID_cols)]
return(filtered_data)
}
new_dir <- "C:/Users/USER/Downloads/function_tool/"
setwd(new_dir)
source("tool_function/fetch_function.R")
library(testthat)
# 創建一個測試用的假資料表
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
# 測試 fetch_data() 函數是否能正常運行並返回正確的結果
filtered_data <- fetch_data(dt, target_ID_cols, disease_ID_cols, disease_codes)
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.(target_ID_cols)]
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
dt
target_ID_cols
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data
filtered_data1 <- filtered_data[,.target_ID_cols]
filtered_data1 <- filtered_data[,get(target_ID_cols)]
filtered_data1 <- filtered_data[,get(target_ID_cols[1],get(target_ID_cols[2]))]
target_ID_cols[1]
filtered_data1 <- filtered_data[,get(target_ID_cols[1]),get(target_ID_cols[2])]
get(target_ID_cols[1])
filtered_data1 <- filtered_data[,.(get(target_ID_cols[1]),get(target_ID_cols[2]))]
filtered_data1
filtered_data1 <- filtered_data[,.(target_ID_cols[1],
target_ID_cols[2])]
filtered_data1
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.(get(target_ID_cols[1]),
get(target_ID_cols[2]))]
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data1 <- filtered_data[,.(eval(as.name(target_ID_cols[1])),
eval(as.name(target_ID_cols[1])))]
filtered_data1
setnames(filtered_data1, target_ID_cols)
filtered_data1
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.((target_ID_cols[1]),
(target_ID_cols[2]))]
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.(target_ID_cols)]
setnames(filtered_data1, target_ID_cols)
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,(target_ID_cols)]
setnames(filtered_data, target_ID_cols)
target_ID_cols
filtered_data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
dt <- dt[, c(target_ID_cols,disease_ID_cols),with = FALSE]
# Step1: Melt disease_ID
melted_data <- melt(dt, id.var=target_ID_cols)
melted_data <- as.data.table(melted_data)
# Step2: Match disease codes: more
melted_data[, value := as.character(value)]
filtered_data <- melted_data[grepl(paste0("^", paste(disease_codes, collapse="|^")),
value)]
filtered_data <- filtered_data[,.(get(target_ID_cols[1]),get(target_ID_cols[2]))]
setnames(filtered_data, target_ID_cols)
filtered_data
new_dir <- "C:/Users/USER/Downloads/function_tool/"
setwd(new_dir)
source("tool_function/fetch_function.R")
library(testthat)
#===============================================================================
# fetch_data: unit_test
test_that("fetch_data() function test", {
# 創建一個測試用的假資料表
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# 定義目標 ID 列表、疾病 ID 列表和疾病碼
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
# 測試 fetch_data() 函數是否能正常運行並返回正確的結果
filtered_data <- fetch_data(dt, target_ID_cols, disease_ID_cols, disease_codes)
answer <- data.table(
CHR_NO = c("ID2", "ID1"),
OPD_DATE = c("2024-01-02", "2024-01-01")
)
# 比較兩個data table 是否一致
expect_equal(filtered_data, answer)
})
library(haven)
folder_path <- "C:/Users/USER/Downloads/hospital/TMUCRD_2021/"
file_names <- list.files(path = folder_path, pattern = "\\.sas7bdat$",
full.names = TRUE)
file <- file_names[74]
file
d_tmp <- read_sas(file)
new_dir <- "C:/Users/USER/Downloads/function_tool/"
setwd(new_dir)
source("tool_function/fetch_function.R")
library(testthat)
test_that("fetch_data() function test", {
# Create test data
dt <- data.table(
CHR_NO = c("ID1", "ID2", "ID3"),
OPD_DATE = c("2024-01-01", "2024-01-02", "2024-01-03"),
ICD9_CODE1 = c("5434.01", "434.01", "434.02"),
ICD9_CODE2 = c("585", "586", "587")
)
# Define target_ID_cols, disease_ID_cols, disease_codes
target_ID_cols <- c("CHR_NO", "OPD_DATE")
disease_ID_cols <- c("ICD9_CODE1", "ICD9_CODE2")
disease_codes <- c("434.01", "585")
# Test fetch_data()
filtered_data <- fetch_data(dt, target_ID_cols, disease_ID_cols, disease_codes)
answer <- data.table(
CHR_NO = c("ID2", "ID1"),
OPD_DATE = c("2024-01-02", "2024-01-01")
)
# Compare result
expect_equal(filtered_data, answer)
})
new_dir <- "C:/Users/USER/Downloads/function_tool/"
setwd(new_dir)
source("tool_function/fetch_function.R")
library(testthat)
# example1
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05", "2016-04-04")))
k <- 2
valid_data <- get_valid_data(dt, "ID_TEST", "IPD_DATE", k)
group_id_col<- "ID_TEST"
date_col <- "IPD_DATE"
valid_data <- get_valid_data(dt, group_id_col, date_col, k)
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05", "2016-04-04")))
k <- 2
group_id_col<- "ID_TEST"
date_col <- "IPD_DATE"
# Rename data col
dt <- dt[, .(ID = get(group_id_col),
DATE = get(date_col))]
# Drop Duplicate
dt <- dt[!duplicated(dt)]
# sort values
dt <- dt[order(ID, DATE)]
# new col
dt[, k_times_data := shift(DATE, n = -(k-1)), by = ID]
# cal diff => filter < 365 days => remove diff
dt[, diff := k_times_data - DATE]
dt <- dt[diff <= 365]
dt <- dt[, .(ID, DATE)]
# example1
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05", "2016-04-04")))
k <- 2
group_id_col<- "ID_TEST"
date_col <- "IPD_DATE"
valid_data <- get_valid_data(dt, group_id_col, date_col, k)
new_dir <- "C:/Users/USER/Downloads/function_tool/"
setwd(new_dir)
source("tool_function/fetch_function.R")
library(testthat)
# example1
dt <- data.table(
ID_TEST = c("ID1", "ID2", "ID2", "ID1", "ID2", "ID1"),
IPD_DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05", "2016-04-04")))
k <- 2
group_id_col<- "ID_TEST"
date_col <- "IPD_DATE"
valid_data <- get_valid_data(dt, group_id_col, date_col, k)
valid_data
# create answer
answer <- data.table(
ID = c("ID1", "ID2", "ID2"),
DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03"))
)
answer
# test same result
expect_equal(valid_data, answer)
# example2
dt2 <- data.table(
CHR_NO = c("ID1", "ID1", "ID1", "ID1", "ID2", "ID1"),
OPD_DATE = c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05","2013-04-04"))
k2 <- 3
valid_data2 <- get_valid_data(dt2, "CHR_NO", "OPD_DATE", k2)
# example2
dt2 <- data.table(
CHR_NO = c("ID1", "ID1", "ID1", "ID1", "ID2", "ID1"),
OPD_DATE = as.Date(c("2016-01-01", "2016-02-02", "2016-03-03", "2016-04-04",
"2016-05-05","2013-04-04"))
)
k2 <- 3
valid_data2 <- get_valid_data(dt2, "CHR_NO", "OPD_DATE", k2)
valid_data2
# create answer
answer2 <- data.table(
CHR_NO = c("ID1", "ID1"),
DATE = as.Date(c("2016-01-01", "2016-02-02")))
# test same result
expect_equal(valid_data2, answer2)
answer2
valid_data2
